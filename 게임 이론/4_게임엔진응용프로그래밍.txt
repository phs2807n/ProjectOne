게임 엔진 응용 프로그래밍

 - 유니티, 언리얼, 고도, 프로스트바이트, 크라이, 소스 등등



Unity Engine
 - 스크립트 언어를 지원(C#)
 - Play In Editor : 에디터에서 실제 플레이가 가능하고, 
	플레이 도중에 에디터를 이용하여 게임 내부도 변경할 수 있게 해주는 기능
 - 멀티 플랫폼 지원

유니티 특수풀더

Resources
 - 씬에서 필요한 에셋을 동적으로 로딩할 파일을 저장하는 폴더
 - 해당 폴더에 있는 모든 에셋은 프로그램이 실행되자 마자 메모리에 올라간다.

Scene
 - 맵, 게임 월드

GameObject
 - 유니티 씬에 배치되는 최소 단위
 - 여러개의 컴포넌트로 구성되어 있다.
 - 반드시 Transform 컴포넌트를 가지고 있어야 한다.

Component
 - GameObject를 구성하는 기능의 최소 단위
 - MonoBehavior를 상속받아야 함
 - 주요 컴포넌트 : Rigidbody, Collider, Renderer 등등
 - 주요 함수 
   - public T GetComponent<T>() where T : Component;
   - public T AddComponent<T>() where T : Component;

카메라
 - 투영법(Projection)
   ㄴ 원근투영(Perspective)
   ㄴ 직교투영(Orthographic, Isomeric)
 - 렌더링 파이프라인, 랜더링 패스
   ㄴ Forward : 저성능
   ㄴ Deferred : 고성능, 비디오램 소비가 크다.

Line : 시작점에서 도착점을 잇는 직선
Ray : 시작점(원점)에서 특정 방향을 나가는 선
Raycast : 하나의 Ray가 다른 오븐젝트와 충돌 했는지 체크하는 것

VR(Virtual Reality, 가상현실)
 - 몰입감(해드 트래킹을 통해 머리의 움직임과 게임 카메라를 연동시켜 현실감을 증가시킨다.)
 - 자이로스코프 센서를 활용한 해드 트래킹 및 동작 인식
 - 사람의 눈 눈처럼 서로 떨어져 있는 두개의 카메라를 이용해 각각 랜더링하여
 VR기기에 있는 2개의 디스플레이에 각각 재생한다.
 (양안시차 이용)

HMD(Head Mount Display)


URP(Universal Render Pipeline)

SRP(Scriptable Render Pipeline)
 - LWRP(Light Weight RP) : 가벼운 랜더링 파이프라인
 -> URP

 - HDRP(Hight Definition RP) : AAA급 게임을 목표로 한 고해상도용 랜더링 파이프라인
 -> 영상쪽으로 용도 변경


A*
 - f(x) = g(x) + h(x)
 - g(x) = 시작점에서 x위치까지 도달하는데 거리(사용되는 비용(cost))
 - h(x) = x위치에서 도착점까지의 예상 거리(휴리스틱 함수)

Open list, Close list

1. 시작점을 openlist에 추가한다.
2. open list에 추가가 될 대는 f를 계산한다.(g와 h도 계산이 되어야 함)
3. open list에서 f값이 가장 작은 노드를 하나 선택한다.
4. 선택된 노드의 주변 조드를 open list에 추가한다.
 (못가는 노드와 close list에 있는 노드는 하지 않음. g값이 이전보다 작은 경우는 갱신한다.)
5. 선택된 노드는 colse list에 들어간다.
6. 선택딘 노드가 도착점이 아니면 3번으로 돌아가 다시 실행한다.

필요한 클래스
Node 클래스 : 맵의 한칸.
GridMap 클래스 : 이동할 수 있는 맵 전체. Node 클래스를 여러 개 가진다.
AStar 클래스 : Node와 GirdMap을 이용해서 경로를 탐색하는 스태틱 클래스









