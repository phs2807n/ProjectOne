자료구조(Data Structure)
 - 여러 데이터를 어떻게 관리할 것인가

배열(Array)
 - 같은 종류의 데이터를 여러개 가지는 자료구조
 - 데이터가 연속적으로 이어져 있다. (빈공간 없음)
 - 장점: 값들에 접근하는 속도가 빠르다.(랜덤 엑세스가 빠르다.)
 - 단점: 크기 변경에 시간이 많이 걸린다.(삽입/삭제가 느리다.)

 int[] array = new int[5];
 int temp = array[2]; // 배열의 시작위치에서 2칸만큼 떨어진 곳에 있는 값

리스트(List)
 - 노드 기반
 - 노드는 데이터 부분과 링크부분으로 나누어짐
 - 장점: 삽입/삭제가 매우 편리하다.
 - 단점: 랜덤 엑세스가 느리다.

큐(Queue)
 - FIFO(First In First Out, 선입선출)
 - 데이터가 순서대로 무조건 처리되어야 할 때
 - 데이터의 중간에 삽입/삭제

스텍(Starck)
 - LIFO(Last In First Out, 후입선출)
 - 마지막에 들어간 데이터가 가장 먼저 나온다.
 - 데이터 입력의 역순으로 처리해야 할 때, 긴급 상황처리


Pool
 - 메모리 풀: 메모리를 대량으로 할당 받은 후 프로그램 내부에서 스스로 분해하고 반환받는 방식
     ㄴ 장점: 실시간 성능이 좋아진다. 메모리 단편화 형상을 줄일 수 있다.
     ㄴ 단점: 초기화에 시간이 걸린다.(로딩시간이 길어진다.)
 - 오브젝트 풀: 오브젝트를 대량으로 생성한 후 재활용하는 기법