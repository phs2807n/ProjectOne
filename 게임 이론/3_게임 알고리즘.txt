좌표계
 - 위치를 표현하는데 사용하는 체계
 - 데카르트 좌표계

좌표계 축의 방향에 따른 분류
 - 왼손 좌표계: Window 기반(DirectX)
 - 오른손 좌표계: 수학쪽, 오픈소스진영(OpenGL, 3D Max)

원점 기준에 따른 분류
 - 로컬 좌표계: 자신의 원점 기준으로 한 좌표계
 - 월드 좌표계: 월의의 원점을 기준으로 한 좌표계
 - 월드 변환(World Transform): 오브젝트를 월드에 배치하는 작업
(위치, 회전, 스케일 적용)

스크린 좌표계
 - 디스플레이 기준
 - Unity는 원점을 좌측 하단으로 삼음

랜더링 파이프라인
 - 로컬변환 > 월드변환 > 카메라변환 > 투영변환 -> 레스터라이즈



벡터(Vector)
 백터위치와 벡터는 다르다.
 - 더하기: 각 x,y,z를 더해서 새로운 x,y,z를 만는다.
 - 곱하기: 백터X 백터,백터º 백터

외적(Cross Product): 
 - 두 백터가 만드는  맏드는 평면에 수직한 백터를 생성한다.

 내적(Dot Procuct): 
 - 두 백터의 사이각을 구할 수 있다.

행렬
 - 단위행렬: 다른 행렬에 곱해도 다른 행렬에 변화가 없는 행렬
 - 역행렬: 어떤 행렬에 곱했을 때 단위행렬이 되는 행렬
 - transform을 표현하기 위해 사용
 - 회전을 할 때 짐벌락 발생한다.(오일러 앵글을 사용하지 있어서)

퀴터니언
 - 오일러 앵글로 인한 짐벌락 방직 가능
 - 행렬에 비해 더 적은 메모리 사용
 - 행렬에 비해 연산소독로도 빠르다.

충돌처리
 - 충돌 영역을 사용해야만 한다.(성능 문제)



비트연산
 - 비트 끼리 계산하는 것
 - &: 둘 다 1일 때만 1, 아니면 0
 - |: 둘 중 하나만 1이면 1, 아니면 0
 - <<: 레프트 쉬프트. 비트를 왼쪽으로 지정된 숫자만큼 옮기기. 
	한 번 쉬프트할 때마다 수가 2배가 된다.
 - >>: 라이트 쉬프트, 비트를 오른쪽으로 지정된 숫자만큼 옮기기
	한 번 쉬프트할 때마다 수가 1/2배 된다.

Frustum(사각절두체)
 - 카메라가 3D월드에서 실제로 촬영하느 영역

보간(Interpolation)
 - 시작값과 도착값과 진행시간 중 어느 정도가 경과했는지를 알면 현재 위치를 예상하는 것

키프레임 애니메이션
 - 애니메이션의 핵심적인 동작만 저장하고 나머지는 보간을 통해 계산하는 방식



값형식(Value Type)
 - struct
 - int, float, bool 등등
 - 스택 메모리에 저장된다.
 - 복사를 할 때 깊은 복사가 일어난다. (완전한 사본 생성)

참조형식(Reference Type)
 - class
 - string 등등
 - 힙 메모리에 저장된다.
 - 복사를 할 때 얕은 복사가 일어난다. (참조만 전달한다.)

Boxing(박싱)
 - 값 형식을 참조 형식으로 캐스팅 하는 작업
 - 무조건 피해야 하는 방식



자료구조
 - 구성요소: 노도

리스트: 데이터 부분 + 링크 부분
스택
큐

이진 트리(Binary Tree)

이진 탐색 트리(Binary Search Tree)
 - 탐색에 강점을 가지는 트리.
 - 순서가 있는 데이터(키)를 가져야 한다.
 - 키값이 크면 오른쪽, 작으면 왼쪽 자식으로 추가된다.
 - 트리의 밸런스가 깨지면 탐색 성능이 떨어진다.

힙(Heap)
 - 우선 순위 적용할 때
 - 데이터를 추가할 때 자동으로 정렬된다.
 - 최대힙(Max Heap), 최소힙Min Heap)
 - 최대힙일 때 무조건 부모는 자식보다 크다.
 - 최소힙일 때 무조건 부모는 자식보다 작다.
 - 완전이진트리의 형태를 가져야 한다.


알고리즘
 - 문제를 해결하기 위한 절차.
 - 시간복잡도 : 데이터 갯수에 따른 처리시간
    ㄴ 빅 오 표기법 : O(n), O(n^2), O(n * logN), O(logN)
 - 공간복잡도 : 알고리즘 처리에 필요한 메모리 공간 정도
 
탐색 알고리즘
 - 데이터를 찾는 알고리즘
 - 선형 탐색 알고리즘
 - 이진 탐색 트리

정렬 알고리즘
 - 데이터를 순서대로 정리하는 알고리즘]

해시 알고리즘
 - 입력 데이터를 정해진 크기의 유니티한 데이터로 변경해주는 알고리즘
 - 해시 결과를 다시 원본 데이터로 만들 수 없어야 한다.
 - 해시 충돌 : 서로 다른 입력값에 대해 같은 해시 값이 나오는 경우

길찾기 알고리즘
 - 다익스트라 알고리즘
 - F(x) = G(x)+ H(x)

 - G(x) : 출발점에서 현재 위치까지의 실제거리
 - H(x) : 현재 위치에서 목적지까지의 예상거리

 - 